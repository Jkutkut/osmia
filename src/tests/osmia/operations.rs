use super::*;

macro_tests!(
	test,
	(
		int01,
		Some("{{ 1 + 2 }} {{ 1 - 2 }} {{ 3 * 5 }} {{ 3 / 5 }} {{ 3 % 5 }} {{ 7 && 5 }} {{ 7 || 5 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Mod,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("7"),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("7"),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Int(1), Token::Plus, Expr::Int(2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(1), Token::Minus, Expr::Int(2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Mult, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Div, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Mod, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(7), Token::And, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(7), Token::Or, Expr::Int(5)).into()
		].into())),
		None // "3 -1 15 0 3 true true"
	),
	(
		int_bool_02,
		Some("{{ 5 && 0 }} {{ 0 && 5 }} {{ 5 || 0 }} {{ 0 || 5 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Int(5), Token::And, Expr::Int(0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(0), Token::And, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(5), Token::Or, Expr::Int(0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(0), Token::Or, Expr::Int(5)).into()
		].into())),
		None // "false false true true"
	),
	(
		float01,
		Some("{{ 1.2 + 2.0 }} {{ 1.2 - 2.0 }} {{ 3.2 * 5.2 }} {{ 3.2 / 4.2 }} {{ 3.2 % 5.0 }} {{ 7.2 && 5.0 }} {{ 7.0 || 5.2 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.2"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.2"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.2"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("5.2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.2"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("4.2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.2"),
			Token::Whitespace,
			Token::Mod,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("7.2"),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("7.0"),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::new_number("5.2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Float(1.2), Token::Plus, Expr::Float(2.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(1.2), Token::Minus, Expr::Float(2.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(3.2), Token::Mult, Expr::Float(5.2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(3.2), Token::Div, Expr::Float(4.2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(3.2), Token::Mod, Expr::Float(5.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(7.2), Token::And, Expr::Float(5.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(7.0), Token::Or, Expr::Float(5.2)).into()
		].into())),
		None // "3.2 -0.8 16.64 0.7619047619047619 3.2 true true"
	),
	(
		float_bool_02,
		Some("{{ 5.0 && 0.0 }} {{ 0.0 && 5.0 }} {{ 5.0 || 0.0 }} {{ 0.0 || 5.0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::new_number("0.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("0.0"),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::new_number("0.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("0.0"),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Float(5.0), Token::And, Expr::Float(0.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(0.0), Token::And, Expr::Float(5.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(5.0), Token::Or, Expr::Float(0.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(0.0), Token::Or, Expr::Float(5.0)).into()
		].into())),
		None // "false false true true"
	),
	(
		int02,
		Some("{{ 3 > 5 }} {{ 3 >= 5 }} {{ 3 < 5 }} {{ 3 <= 5 }} {{ 3 == 5 }} {{ 3 != 5 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Greater,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::GreaterEqual,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Less,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::LessEqual,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::NotEqual,
			Token::Whitespace,
			Token::new_number("5"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Int(3), Token::Greater, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::GreaterEqual, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Less, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::LessEqual, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Equal, Expr::Int(5)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::NotEqual, Expr::Int(5)).into()
		].into())),
		None // "false false true true false true"
	),
	(
		float02,
		Some("{{ 3.0 > 5.0 }} {{ 3.0 >= 5.0 }} {{ 3.0 < 5.0 }} {{ 3.0 <= 5.0 }} {{ 3.0 == 5.0 }} {{ 3.0 != 5.0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.0"),
			Token::Whitespace,
			Token::Greater,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.0"),
			Token::Whitespace,
			Token::GreaterEqual,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.0"),
			Token::Whitespace,
			Token::Less,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.0"),
			Token::Whitespace,
			Token::LessEqual,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.0"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3.0"),
			Token::Whitespace,
			Token::NotEqual,
			Token::Whitespace,
			Token::new_number("5.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Float(3.0), Token::Greater, Expr::Float(5.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(3.0), Token::GreaterEqual, Expr::Float(5.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(3.0), Token::Less, Expr::Float(5.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(3.0), Token::LessEqual, Expr::Float(5.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(3.0), Token::Equal, Expr::Float(5.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(3.0), Token::NotEqual, Expr::Float(5.0)).into()
		].into())),
		None // "false false true true false true"
	),
	(
		int_float01,
		Some("{{ 1 + 2.0 }} {{ 1.0 + 2 }} {{ 1 - 2.0 }} {{ 1.0 - 2 }} {{ 1 * 2.0 }} {{ 1.0 * 2 }} {{ 1 / 2.0 }} {{ 1.0 / 2 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.0"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.0"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.0"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.0"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Int(1), Token::Plus, Expr::Float(2.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(1.0), Token::Plus, Expr::Int(2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(1), Token::Minus, Expr::Float(2.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(1.0), Token::Minus, Expr::Int(2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(1), Token::Mult, Expr::Float(2.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(1.0), Token::Mult, Expr::Int(2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(1), Token::Div, Expr::Float(2.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(1.0), Token::Div, Expr::Int(2)).into()
		].into())),
		None // "3 3 -1 -1 2 2 0.5 0.5"
	),
	(
		division,
		Some("{{ 1 / 2 }} {{ 1.0 / 2 }} {{ 1 / 2.0 }} {{ 1.0 / 2.0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.0"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.0"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Int(1), Token::Div, Expr::Int(2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(1.0), Token::Div, Expr::Int(2)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(1), Token::Div, Expr::Float(2.0)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Float(1.0), Token::Div, Expr::Float(2.0)).into()
		].into())),
		None // "0 0.5 0.5 0.5"
	),
	(
		bool01,
		Some("{{ true && true }} {{ true && false }} {{ false && true }} {{ false && false }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::And,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Bool(true), Token::And, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Bool(true), Token::And, Expr::Bool(false)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Bool(false), Token::And, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Bool(false), Token::And, Expr::Bool(false)).into()
		].into())),
		None // "true false false false"
	),
	(
		bool02,
		Some("{{ true || true }} {{ true || false }} {{ false || true }} {{ false || false }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::Or,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Bool(true), Token::Or, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Bool(true), Token::Or, Expr::Bool(false)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Bool(false), Token::Or, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Bool(false), Token::Or, Expr::Bool(false)).into()
		].into())),
		None // "true true true false"
	),
	(
		str01,
		Some(r#"{{ "hello" + " world" }},{{"null: " + null}},{{"true: " + true}},{{"false: " + false}},{{"int: " + 1}},{{"float: " + 1.1}}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("hello"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_str(" world"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::new_str("null: "),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Null,
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::new_str("true: "),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Bool(true),
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::new_str("false: "),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Bool(false),
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::new_str("int: "),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("1"),
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::new_str("float: "),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("1.1"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::new_str("hello"), Token::Plus, Expr::new_str(" world")).into(),
			Stmt::new_raw(","),
			new_binary(Expr::new_str("null: "), Token::Plus, Expr::Null).into(),
			Stmt::new_raw(","),
			new_binary(Expr::new_str("true: "), Token::Plus, Expr::Bool(true)).into(),
			Stmt::new_raw(","),
			new_binary(Expr::new_str("false: "), Token::Plus, Expr::Bool(false)).into(),
			Stmt::new_raw(","),
			new_binary(Expr::new_str("int: "), Token::Plus, Expr::Int(1)).into(),
			Stmt::new_raw(","),
			new_binary(Expr::new_str("float: "), Token::Plus, Expr::Float(1.1)).into(),
		].into())),
		None // "hello world,null: null,true: true,false: false,int: 1,float: 1.1"
	),
	(
		str02,
		Some(r#"{{null + "null"}},{{true + "true"}},{{false + "false"}},{{1 + "int"}},{{1.6 + "float"}}"#),
		Some(vec![
			Token::StmtStart,
			Token::Null,
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_str("null"),
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::Bool(true),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_str("true"),
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::Bool(false),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_str("false"),
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_str("int"),
			Token::StmtEnd,
			Token::new_raw(","),
			Token::StmtStart,
			Token::new_number("1.6"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_str("float"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Null, Token::Plus, Expr::new_str("null")).into(),
			Stmt::new_raw(","),
			new_binary(Expr::Bool(true), Token::Plus, Expr::new_str("true")).into(),
			Stmt::new_raw(","),
			new_binary(Expr::Bool(false), Token::Plus, Expr::new_str("false")).into(),
			Stmt::new_raw(","),
			new_binary(Expr::Int(1), Token::Plus, Expr::new_str("int")).into(),
			Stmt::new_raw(","),
			new_binary(Expr::Float(1.6), Token::Plus, Expr::new_str("float")).into(),
		].into())),
		None // "nullnull,truetrue,falsefalse,1int,1.6float"
	),
	(
		unary01,
		Some("{{ !true }} {{ !false }} {{ !!true }} {{ !!false }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Not,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Not,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Not,
			Token::Not,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Not,
			Token::Not,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_unary(Token::Not, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_unary(Token::Not, Expr::Bool(false)).into(),
			Stmt::new_raw(" "),
			new_unary(
				Token::Not,
				new_unary(Token::Not, Expr::Bool(true)).into()
			).into(),
			Stmt::new_raw(" "),
			new_unary(
				Token::Not,
				new_unary(Token::Not, Expr::Bool(false)).into()
			).into(),
		].into())),
		None // "false true true false"
	),
	(
		unary02,
		Some("{{ -+-3 }} {{-2}}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Minus,
			Token::Plus,
			Token::Minus,
			Token::new_number("3"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Minus,
			Token::new_number("2"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_unary(Token::Minus, new_unary(Token::Plus, new_unary(Token::Minus, Expr::Int(3)))).into(),
			Stmt::new_raw(" "),
			new_unary(Token::Minus, Expr::Int(2)).into(),
		].into())),
		None // "3 -2"
	),
	(
		bool03,
		Some("{{ 1 + true }} {{ 1 + false }} {{ 0 + true }} {{ 0 + false }} {{ 3 + true }} {{ 3 + false }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Int(1), Token::Plus, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(1), Token::Plus, Expr::Bool(false)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(0), Token::Plus, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(0), Token::Plus, Expr::Bool(false)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Plus, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Plus, Expr::Bool(false)).into()
		].into())),
		None // "true true true false true true"
	),
	(
		bool04,
		Some("{{ 1 - true }} {{ 1 - false }} {{ 0 - true }} {{ 0 - false }} {{ 3 - true }} {{ 3 - false }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::Bool(true),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::Bool(false),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_binary(Expr::Int(1), Token::Minus, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(1), Token::Minus, Expr::Bool(false)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(0), Token::Minus, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(0), Token::Minus, Expr::Bool(false)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Minus, Expr::Bool(true)).into(),
			Stmt::new_raw(" "),
			new_binary(Expr::Int(3), Token::Minus, Expr::Bool(false)).into()
		].into())),
		None // "true false false true true false"
	),
	(
		unary03,
		Some("{{ !!3 }} {{ !!-3 }} {{ !!0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Not,
			Token::Not,
			Token::new_number("3"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Not,
			Token::Not,
			Token::Minus,
			Token::new_number("3"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::new_raw(" "),
			Token::StmtStart,
			Token::Whitespace,
			Token::Not,
			Token::Not,
			Token::new_number("0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			new_unary(
				Token::Not,
				new_unary(Token::Not, Expr::Int(3))
			).into(),
			Stmt::new_raw(" "),
			new_unary(
				Token::Not,
				new_unary(
					Token::Not,
					new_unary(Token::Minus, Expr::Int(3))
				).into()
			).into(),
			Stmt::new_raw(" "),
			new_unary(
				Token::Not,
				new_unary(Token::Not, Expr::Int(0))
			).into()
		].into())),
		None // "true true false"
	),
	(
		grouping01,
		Some("{{ (1 + 2) * 3 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::ParentStart,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("2"),
			Token::ParentEnd,
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(
			Grouping::new(
				new_binary(Expr::Int(1), Token::Plus, Expr::Int(2)).into(),
			).into(),
			Token::Mult,
			Expr::Int(3),
		).into()),
		None // "9"
	),
	(
		grouping02,
		Some("{{ 1 + (2 * 3) }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::ParentStart,
			Token::new_number("2"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("3"),
			Token::ParentEnd,
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(
			Expr::Int(1),
			Token::Plus,
			Grouping::new(
				new_binary(Expr::Int(2), Token::Mult, Expr::Int(3)).into()
			).into(),
		).into()),
		None // "7"
	),
	(
		grouping03,
		Some("{{ (1 + 2) * (3 + 4) }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::ParentStart,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("2"),
			Token::ParentEnd,
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::ParentStart,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("4"),
			Token::ParentEnd,
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(
			Grouping::new(
				new_binary(Expr::Int(1), Token::Plus, Expr::Int(2)).into(),
			).into(),
			Token::Mult,
			Grouping::new(
				new_binary(Expr::Int(3), Token::Plus, Expr::Int(4)).into()
			).into(),
		).into()),
		None // "21"
	),
	(
		float_infinity,
		Some("{{ 1.0 / 0.0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1.0"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("0.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Float(1.0), Token::Div, Expr::Float(0.0)).into()),
		None // "inf"
	),
	(
		float_neg_infinity,
		Some("{{ -1.0 / 0.0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Minus,
			Token::new_number("1.0"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("0.0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(
			new_unary(Token::Minus, Expr::Float(1.0)).into(),
			Token::Div,
			Expr::Float(0.0),
		).into()),
		None // "-inf"
	)
);

macro_tests!(
	test,
	(
		basic_operation00,
		Some("2 + 1 = {{2 + 1}}"),
		Some(vec![
			Token::new_raw("2 + 1 = "),
			Token::StmtStart,
			Token::new_number("2"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("1"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("2 + 1 = "),
			new_binary(Expr::Int(2), Token::Plus, Expr::Int(1)).into()
		].into())),
		None // "2 + 1 = 3"
	),
	(
		basic_operation01,
		Some("2 - 1 = {{2 - 1}}"),
		Some(vec![
			Token::new_raw("2 - 1 = "),
			Token::StmtStart,
			Token::new_number("2"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("1"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("2 - 1 = "),
			new_binary(Expr::Int(2), Token::Minus, Expr::Int(1)).into()
		].into())),
		None // "2 - 1 = 1"
	),
	(
		basic_operation02,
		Some("2 * 3 = {{2 * 3}}"),
		Some(vec![
			Token::new_raw("2 * 3 = "),
			Token::StmtStart,
			Token::new_number("2"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("3"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("2 * 3 = "),
			new_binary(Expr::Int(2), Token::Mult, Expr::Int(3)).into()
		].into())),
		None // "2 * 3 = 6"
	),
	(
		basic_operation03,
		Some("6 / 2 = {{6 / 2}}"),
		Some(vec![
			Token::new_raw("6 / 2 = "),
			Token::StmtStart,
			Token::new_number("6"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("6 / 2 = "),
			new_binary(Expr::Int(6), Token::Div, Expr::Int(2)).into()
		].into())),
		None // "6 / 2 = 3"
	),
	(
		basic_operation04,
		Some("6 % 4 = {{6 % 4}}"),
		Some(vec![
			Token::new_raw("6 % 4 = "),
			Token::StmtStart,
			Token::new_number("6"),
			Token::Whitespace,
			Token::Mod,
			Token::Whitespace,
			Token::new_number("4"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("6 % 4 = "),
			new_binary(Expr::Int(6), Token::Mod, Expr::Int(4)).into()
		].into())),
		None // "6 % 4 = 2"
	),
	(
		basic_operation05,
		Some("2 + 3 * 4 = {{2 + 3 * 4}}"),
		Some(vec![
			Token::new_raw("2 + 3 * 4 = "),
			Token::StmtStart,
			Token::new_number("2"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("4"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("2 + 3 * 4 = "),
			new_binary(
				Expr::Int(2),
				Token::Plus,
				new_binary(Expr::Int(3), Token::Mult, Expr::Int(4)),
			).into()
		].into())),
		None // "2 + 3 * 4 = 14"
	),
	(
		basic_operation06,
		Some("(2 + 3) * 4 = {{(2 + 3) * 4}}"),
		Some(vec![
			Token::new_raw("(2 + 3) * 4 = "),
			Token::StmtStart,
			Token::ParentStart,
			Token::new_number("2"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("3"),
			Token::ParentEnd,
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("4"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("(2 + 3) * 4 = "),
			new_binary(
				Grouping::new(
					new_binary(Expr::Int(2), Token::Plus, Expr::Int(3)),
				).into(),
				Token::Mult,
				Expr::Int(4),
			).into()
		].into())),
		None // "(2 + 3) * 4 = 20"
	),
	(
		basic_operation07,
		Some("2 + 3 * 4 - 5 = {{2 + 3 * 4 - 5}}"),
		Some(vec![
			Token::new_raw("2 + 3 * 4 - 5 = "),
			Token::StmtStart,
			Token::new_number("2"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("4"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("5"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("2 + 3 * 4 - 5 = "),
			new_binary(
				new_binary(
					Expr::Int(2),
					Token::Plus,
					new_binary(Expr::Int(3), Token::Mult, Expr::Int(4)),
				),
				Token::Minus,
				Expr::Int(5),
			).into()
		].into())),
		None // "2 + 3 * 4 - 5 = 9"
	),
	(
		basic_operation08,
		Some("2 + 3 * (4 - 5) = {{2 + 3 * (4 - 5)}}"),
		Some(vec![
			Token::new_raw("2 + 3 * (4 - 5) = "),
			Token::StmtStart,
			Token::new_number("2"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::ParentStart,
			Token::new_number("4"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("5"),
			Token::ParentEnd,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("2 + 3 * (4 - 5) = "),
			new_binary(
				Expr::Int(2),
				Token::Plus,
				new_binary(
					Expr::Int(3),
					Token::Mult,
					Grouping::new(new_binary(
						Expr::Int(4),
						Token::Minus,
						Expr::Int(5)
					)).into()
				).into()
			).into()
		].into())),
		None // "2 + 3 * (4 - 5) = -1"
	),
	(
		basic_operation09,
		Some(r#"{{ 3 & 1 }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::BitAnd,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(3), Token::BitAnd, Expr::Int(1)).into()),
		None // r#"1"#
	),
	(
		basic_operation10,
		Some(r#"{{ 3 | 1 }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::BitOr,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(3), Token::BitOr, Expr::Int(1)).into()),
		None // r#"3"#
	),
	(
		basic_operation11,
		Some(r#"{{ 3 ^ 1 }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("3"),
			Token::Whitespace,
			Token::BitXor,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(3), Token::BitXor, Expr::Int(1)).into()),
		None // r#"2"#
	),
	(
		basic_operation12,
		Some(r#"{{ 1 << 2 }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::BitShiftLeft,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(1), Token::BitShiftLeft, Expr::Int(2)).into()),
		None // r#"4"#
	),
	(
		basic_operation13,
		Some(r#"{{ 4 >> 2 }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("4"),
			Token::Whitespace,
			Token::BitShiftRight,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(4), Token::BitShiftRight, Expr::Int(2)).into()),
		None // r#"1"#
	),
	// Decimals
	(
		basic_operation14_1,
		Some("7 / 2 = {{7 / 2}}"),
		Some(vec![
			Token::new_raw("7 / 2 = "),
			Token::StmtStart,
			Token::new_number("7"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("7 / 2 = "),
			new_binary(Expr::Int(7), Token::Div, Expr::Int(2)).into()
		].into())),
		None // "7 / 2 = 3"
	),
	(
		basic_operation15_2,
		Some("7.0 / 2 = {{7.0 / 2}}"),
		Some(vec![
			Token::new_raw("7.0 / 2 = "),
			Token::StmtStart,
			Token::new_number("7.0"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("7.0 / 2 = "),
			new_binary(Expr::Float(7.0), Token::Div, Expr::Int(2)).into()
		].into())),
		None // "7 / 2 = 3.5"
	),
	(
		basic_operation16,
		Some("7 + 3.2 - 1.2 = {{7 + 3.2 - 1.2}}"),
		Some(vec![
			Token::new_raw("7 + 3.2 - 1.2 = "),
			Token::StmtStart,
			Token::new_number("7"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("3.2"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("1.2"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("7 + 3.2 - 1.2 = "),
			new_binary(
				new_binary(Expr::Int(7), Token::Plus, Expr::Float(3.2)).into(),
				Token::Minus,
				Expr::Float(1.2)
			).into()
		].into())),
		None // "7 + 3.2 - 1.2 = 9"
	),
	(
		basic_operation17,
		Some("7.0 / 2.0 = {{7.0 / 2.0}}"),
		Some(vec![
			Token::new_raw("7.0 / 2.0 = "),
			Token::StmtStart,
			Token::new_number("7.0"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("2.0"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Block(vec![
			Stmt::new_raw("7.0 / 2.0 = "),
			new_binary(Expr::Float(7.0), Token::Div, Expr::Float(2.0)).into()
		].into())),
		None // "7.0 / 2.0 = 3.5"
	),
	// String
	(
		basic_str_op01,
		Some(r#"{{ "abc" + "def" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_str("def"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::Plus, Expr::new_str("def")).into()),
		None // "abcdef"
	),
	(
		basic_str_op02,
		Some(r#"{{ "abc" == "def" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_str("def"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::Equal, Expr::new_str("def")).into()),
		None // r#"false"#
	),
	(
		basic_str_op03,
		Some(r#"{{ "abc" != "def" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::NotEqual,
			Token::Whitespace,
			Token::new_str("def"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::NotEqual, Expr::new_str("def")).into()),
		None // r#"true"#
	),
	(
		basic_str_op04,
		Some(r#"{{ "abc" < "def" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::Less,
			Token::Whitespace,
			Token::new_str("def"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::Less, Expr::new_str("def")).into()),
		None // r#"true"#
	),
	(
		basic_str_op05,
		Some(r#"{{ "abc" > "def" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::Greater,
			Token::Whitespace,
			Token::new_str("def"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::Greater, Expr::new_str("def")).into()),
		None // r#"false"#
	),
	(
		basic_str_op06,
		Some(r#"{{ "abc" <= "def" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::LessEqual,
			Token::Whitespace,
			Token::new_str("def"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::LessEqual, Expr::new_str("def")).into()),
		None // r#"true"#
	),
	(
		basic_str_op07,
		Some(r#"{{ "abc" >= "def" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::GreaterEqual,
			Token::Whitespace,
			Token::new_str("def"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::GreaterEqual, Expr::new_str("def")).into()),
		None // r#"false"#
	),
	(
		basic_str_op08,
		Some(r#"{{ "abc" == "abc" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::Equal, Expr::new_str("abc")).into()),
		None // r#"true"#
	),
	(
		basic_str_op09,
		Some(r#"{{ "abc" != "abc" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::NotEqual,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::NotEqual, Expr::new_str("abc")).into()),
		None // r#"false"#
	),
	(
		basic_str_op10,
		Some(r#"{{ "abc" < "abc" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::Less,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::Less, Expr::new_str("abc")).into()),
		None // r#"false"#
	),
	(
		basic_str_op11,
		Some(r#"{{ "abc" > "abc" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::Greater,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::Greater, Expr::new_str("abc")).into()),
		None // r#"false"#
	),
	(
		basic_str_op12,
		Some(r#"{{ "abc" <= "abc" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::LessEqual,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::LessEqual, Expr::new_str("abc")).into()),
		None // r#"true"#
	),
	(
		basic_str_op13,
		Some(r#"{{ "abc" >= "abc" }}"#),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::GreaterEqual,
			Token::Whitespace,
			Token::new_str("abc"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::new_str("abc"), Token::GreaterEqual, Expr::new_str("abc")).into()),
		None // r#"true"#
	)
);

macro_tests!(
	test, // test_error,
	(
		int_infinity,
		Some("{{ 1 / 0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(1), Token::Div, Expr::Int(0)).into()),
		None // r#"{}"#
	),
	(
		int_neg_infinity,
		Some("{{ -1 / 0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Minus,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(
			new_unary(Token::Minus, Expr::Int(1)),
			Token::Div,
			Expr::Int(0)
		).into()),
		None // r#"{}"#
	),
	(
		invalid_div01,
		Some("{{ 1 / 0 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::Div,
			Token::Whitespace,
			Token::new_number("0"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(1), Token::Div, Expr::Int(0)).into()),
		None // r#"{}"#
	),
	(
		overflow01,
		Some("{{ 9223372036854775807 + 1 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("9223372036854775807"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_number("1"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(9223372036854775807), Token::Plus, Expr::Int(1)).into()),
		None // r#"{}"#
	),
	(
		overflow02,
		Some("{{ -9223372036854775807 - 2 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Minus,
			Token::new_number("9223372036854775807"),
			Token::Whitespace,
			Token::Minus,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(
			new_unary(Token::Minus, Expr::Int(9223372036854775807)),
			Token::Minus,
			Expr::Int(2)
		).into()),
		None // r#"{}"#
	),
	(
		overflow03,
		Some("{{ 9223372036854775807 * 2 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::new_number("9223372036854775807"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(Expr::Int(9223372036854775807), Token::Mult, Expr::Int(2)).into()),
		None // r#"{}"#
	),
	(
		overflow04,
		Some("{{ -9223372036854775807 * 2 }}"),
		Some(vec![
			Token::StmtStart,
			Token::Whitespace,
			Token::Minus,
			Token::new_number("9223372036854775807"),
			Token::Whitespace,
			Token::Mult,
			Token::Whitespace,
			Token::new_number("2"),
			Token::Whitespace,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(new_binary(
			new_unary(Token::Minus, Expr::Int(9223372036854775807)),
			Token::Mult,
			Expr::Int(2)
		).into()),
		None // r#"{}"#
	)
);
