use super::*;

macro_tests!(
	test,
	(
		if_01,
		Some(r#"{{if condition == "if"}}{{print "condition is if"}}{{fi}}"#),
		Some(vec![
			Token::StmtStart,
			Token::If,
			Token::Whitespace,
			Token::new_alpha("condition"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_str("if"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_str("condition is if"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Fi,
			Token::StmtEnd,
			Token::Eof
		]),
		None,
		None
	),
	(
		if_02,
		Some(r#"
{{if condition == "if"}}
	{{print "condition is if"}}
{{else}}
	{{print "condition is else"}}
{{fi}}"#),
		Some(vec![
			Token::NewLine,
			Token::StmtStart,
			Token::If,
			Token::Whitespace,
			Token::new_alpha("condition"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_str("if"),
			Token::StmtEnd,
			Token::NewLine,
			Token::new_raw("\t"),
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_str("condition is if"),
			Token::StmtEnd,
			Token::NewLine,
			Token::StmtStart,
			Token::Else,
			Token::StmtEnd,
			Token::NewLine,
			Token::new_raw("\t"),
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_str("condition is else"),
			Token::StmtEnd,
			Token::NewLine,
			Token::StmtStart,
			Token::Fi,
			Token::StmtEnd,
			Token::Eof
		]),
		None,
		None
	),
	(
		if_03,
		Some(r#"
{{if condition == "if"}}
	{{print "condition is if"}}
{{elseif condition == "elseif01"}}
	{{print "condition is elseif01"}}
{{elseif condition == "elseif02"}}
	{{print "condition is elseif02"}}
{{else}}
	{{print "condition is else"}}
{{fi}}"#),
		Some(vec![
			Token::NewLine,
			Token::StmtStart,
			Token::If,
			Token::Whitespace,
			Token::new_alpha("condition"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_str("if"),
			Token::StmtEnd,
			Token::NewLine,
			Token::new_raw("\t"),
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_str("condition is if"),
			Token::StmtEnd,
			Token::NewLine,
			Token::StmtStart,
			Token::ElseIf,
			Token::Whitespace,
			Token::new_alpha("condition"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_str("elseif01"),
			Token::StmtEnd,
			Token::NewLine,
			Token::new_raw("\t"),
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_str("condition is elseif01"),
			Token::StmtEnd,
			Token::NewLine,
			Token::StmtStart,
			Token::ElseIf,
			Token::Whitespace,
			Token::new_alpha("condition"),
			Token::Whitespace,
			Token::Equal,
			Token::Whitespace,
			Token::new_str("elseif02"),
			Token::StmtEnd,
			Token::NewLine,
			Token::new_raw("\t"),
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_str("condition is elseif02"),
			Token::StmtEnd,
			Token::NewLine,
			Token::StmtStart,
			Token::Else,
			Token::StmtEnd,
			Token::NewLine,
			Token::new_raw("\t"),
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_str("condition is else"),
			Token::StmtEnd,
			Token::NewLine,
			Token::StmtStart,
			Token::Fi,
			Token::StmtEnd,
			Token::Eof
		]),
		None,
		None
	),
	(
		if_04,
		Some(r#"{{if v1}}if{{if v2}}if01{{else}}else01{{fi}}{{else}}else02{{fi}}"#),
		Some(vec![
			Token::StmtStart,
			Token::If,
			Token::Whitespace,
			Token::new_alpha("v1"),
			Token::StmtEnd,
			Token::new_raw("if"),
			Token::StmtStart,
			Token::If,
			Token::Whitespace,
			Token::new_alpha("v2"),
			Token::StmtEnd,
			Token::new_raw("if01"),
			Token::StmtStart,
			Token::Else,
			Token::StmtEnd,
			Token::new_raw("else01"),
			Token::StmtStart,
			Token::Fi,
			Token::StmtEnd,
			Token::StmtStart,
			Token::Else,
			Token::StmtEnd,
			Token::new_raw("else02"),
			Token::StmtStart,
			Token::Fi,
			Token::StmtEnd,
			Token::Eof
		]),
		None,
		None
	)
);
