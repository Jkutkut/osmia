use super::*;

macro_tests!(
	test,
	(
		continue_01,
		Some("{{continue}}"),
		Some(vec![
			Token::StmtStart,
			Token::Continue,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Continue),
		None
	),
	(
		continue_02,
		Some("{{while true}}{{continue}}{{done}}"),
		Some(vec![
			Token::StmtStart,
			Token::While,
			Token::Whitespace,
			Token::Bool(true),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Continue,
			Token::StmtEnd,
			Token::StmtStart,
			Token::Done,
			Token::StmtEnd,
			Token::Eof
		]),
		None,
		None
	),
	(
		break_01,
		Some("{{break}}"),
		Some(vec![
			Token::StmtStart,
			Token::Break,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Break),
		None
	),
	(
		break_02,
		Some("{{while true}}{{break}}{{done}}"),
		Some(vec![
			Token::StmtStart,
			Token::While,
			Token::Whitespace,
			Token::Bool(true),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Break,
			Token::StmtEnd,
			Token::StmtStart,
			Token::Done,
			Token::StmtEnd,
			Token::Eof
		]),
		None,
		None
	),
	(
		return_01,
		Some("{{return}}"),
		Some(vec![
			Token::StmtStart,
			Token::Return,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::new_return(None)),
		None
	),
	(
		return_02,
		Some("{{while true}}{{return}}{{done}}"),
		Some(vec![
			Token::StmtStart,
			Token::While,
			Token::Whitespace,
			Token::Bool(true),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Return,
			Token::StmtEnd,
			Token::StmtStart,
			Token::Done,
			Token::StmtEnd,
			Token::Eof
		]),
		None,
		None
	),
	(
		return_03,
		Some("{{return v}}"),
		Some(vec![
			Token::StmtStart,
			Token::Return,
			Token::Whitespace,
			Token::new_alpha("v"),
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::new_return(Some(
			Variable::from_vec(vec![
				JsonTreeKeyExpression::JsonTreeKey("v".into()),
			]).into()
		))),
		None
	)
);
