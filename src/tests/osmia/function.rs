use super::*;

macro_tests!(
	test,
	(
		fn_01,
		Some(r#"{{fn foo}}{{print "Hello, world!"}}{{done}}"#),
		Some(vec![
			Token::StmtStart,
			Token::Function,
			Token::Whitespace,
			Token::new_alpha("foo"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_str("Hello, world!"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Done,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Function(Function::new(
			"foo".into(),
			Vec::new(),
			Stmt::Print(Print::new(Expr::new_str("Hello, world!")))
		))),
		None
	),
	(
		fn_02,
		Some(r#"{{fn foo; arg}}{{print arg}}{{done}}"#),
		Some(vec![
			Token::StmtStart,
			Token::Function,
			Token::Whitespace,
			Token::new_alpha("foo"),
			Token::Semicolon,
			Token::Whitespace,
			Token::new_alpha("arg"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_alpha("arg"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Done,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Function(Function::new(
			"foo".into(),
			vec![
				FunctionParam::new("arg".into(), None)
			],
			Stmt::Print(Print::new(Expr::Variable(Variable::from_vec(vec![
				JsonTreeKeyExpression::JsonTreeKey("arg".into())
			]))))
		))),
		None
	),
	(
		fn_03,
		Some(r#"{{fn foo; arg1, arg2}}{{print arg1 + arg2}}{{done}}"#),
		Some(vec![
			Token::StmtStart,
			Token::Function,
			Token::Whitespace,
			Token::new_alpha("foo"),
			Token::Semicolon,
			Token::Whitespace,
			Token::new_alpha("arg1"),
			Token::Comma,
			Token::Whitespace,
			Token::new_alpha("arg2"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_alpha("arg1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_alpha("arg2"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Done,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Function(Function::new(
			"foo".into(),
			vec![
				FunctionParam::new("arg1".into(), None),
				FunctionParam::new("arg2".into(), None)
			],
			Stmt::Print(Print::new(
				Binary::new(
					Expr::Variable(Variable::from_vec(vec![
						JsonTreeKeyExpression::JsonTreeKey("arg1".into())
					])),
					BinaryOp::Plus,
					Expr::Variable(Variable::from_vec(vec![
						JsonTreeKeyExpression::JsonTreeKey("arg2".into())
					]))
				).into()
			))
		))),
		None
	),
	(
		fn_04,
		Some(r#"{{fn foo; arg1=true, arg2 = false}}{{print arg1 + arg2}}{{done}}"#),
		Some(vec![
			Token::StmtStart,
			Token::Function,
			Token::Whitespace,
			Token::new_alpha("foo"),
			Token::Semicolon,
			Token::Whitespace,
			Token::new_alpha("arg1"),
			Token::Assign,
			Token::Bool(true),
			Token::Comma,
			Token::Whitespace,
			Token::new_alpha("arg2"),
			Token::Whitespace,
			Token::Assign,
			Token::Whitespace,
			Token::Bool(false),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_alpha("arg1"),
			Token::Whitespace,
			Token::Plus,
			Token::Whitespace,
			Token::new_alpha("arg2"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Done,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Function(Function::new(
			"foo".into(),
			vec![
				FunctionParam::new("arg1".into(), Some(Expr::Bool(true))),
				FunctionParam::new("arg2".into(), Some(Expr::Bool(false)))
			],
			Stmt::Print(Print::new(
				Binary::new(
					Expr::Variable(Variable::from_vec(vec![
						JsonTreeKeyExpression::JsonTreeKey("arg1".into())
					])),
					BinaryOp::Plus,
					Expr::Variable(Variable::from_vec(vec![
						JsonTreeKeyExpression::JsonTreeKey("arg2".into())
					]))
				).into()
			))
		))),
		None
	),
	(
		fn_05,
		Some(r#"{{fn foo; ...args}}{{print args}}{{done}}"#),
		Some(vec![
			Token::StmtStart,
			Token::Function,
			Token::Whitespace,
			Token::new_alpha("foo"),
			Token::Semicolon,
			Token::Whitespace,
			Token::Spread,
			Token::new_alpha("args"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Print,
			Token::Whitespace,
			Token::new_alpha("args"),
			Token::StmtEnd,
			Token::StmtStart,
			Token::Done,
			Token::StmtEnd,
			Token::Eof
		]),
		Some(Stmt::Function(Function::new(
			"foo".into(),
			vec![
				FunctionParam::new_spread("args".into()),
			],
			Stmt::Print(Print::new(
				Expr::Variable(Variable::from_vec(vec![
					JsonTreeKeyExpression::JsonTreeKey("args".into())
				]),
				).into()
			))
		))),
		None
	)
);
